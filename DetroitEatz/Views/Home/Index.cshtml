@model IEnumerable<DetroitEatz.Models.Restaurant>
@section scripts {
    @if (ViewBag.location != null)
    {
        <script type="text/javascript">
    var foodPlace;
    var id;
    var map;
    var service;
    var infowindow;
    var types;
    var radius;
    var lat;
    var lon;
    var longitude;
    var restaurantsUri = '/api/Restaurants';
    var geocoder;
    /*
    $(document).ready(function () {
       // alert('Ouch');
        ajaxHelper(restaurantsUri, 'POST', food);
        ajaxHelper(restaurantsUri, 'GET');
        alert('hyt');
        });
    */

    function ajaxHelper(uri, method, data) {
        //self.error(''); // Clear error message
        return $.ajax({
            type: method,
            url: uri, dataType: 'json',
            contentType: 'application/json',
            data: data ? JSON.stringify(data) : null
        }).fail(function (jqXHR, textStatus, errorThrown) {
            //self.error(errorThrown);
            alert(method);
        });
    }

    function initialize() {

        @*var geocoder = new google.maps.Geocoder();
        geocoder.geocode(
            {
                address: '@ViewBag.location'
            },
            function (results, status) {

                var resultLocations = [];

                if (status == google.maps.GeocoderStatus.OK) {
                    if (results) {
                        //var numOfResults = results.length;
                        //for (var i = 0; i < numOfResults; i++) {
                        //    var result = results[i];
                        //    resultLocations.push(
                        //        {
                        //            text: result.formatted_address,
                        //            addressStr: result.formatted_address,
                        //            location: result.geometry.location
                        //        }
                        //    );
                        //};
                        lat = result.geometry.latitude;
                        lon = result.geometry.longitude;
                    }
                } else if (status == google.maps.GeocoderStatus.ZERO_RESULTS) {
                    // address not found
                }
            });*@

        //geocode = new google.maps.Geocoder();
        var detroit = new google.maps.LatLng(42.331427, -83.0457538);
        //var where = new google.maps.LatLng(lat, lon);
        map = new google.maps.Map(document.getElementById('map'), {
            mapTypeId: google.maps.MapTypeId.ROADMAP,
            center: detroit,
            zoom: 15
        });
    
        service = new google.maps.places.PlacesService(map);
        service.textSearch({
            //location: new google.maps.LatLng(lat, lon),
            location: detroit,
            radius: '500',
            query: '@ViewBag.foodValue'
        }, callback);
        
        @*var request = {
            location: detroit,
            center: detroit,
            radius: 500,
            //types: ['restaurant']
            query: '@ViewBag.foodValue'
        };*@
        infowindow = new google.maps.InfoWindow();
        //service = new google.maps.places.PlacesService(map);
        //service.textSearch(request, callback);

        function callback(results, status) {
            if (status === google.maps.places.PlacesServiceStatus.OK) {
                for (var i = 0; i < results.length; i++) {
                    createMarker(results[i]);
                    //id = i + 1;
                    /*
                    foodPlace = {
                        PlaceID: results[i].id,
                        Name: results[i].name,
                        PriceLevel: results[i].price_level,
                        WebSite: results[i].website,
                        Rating: results[i].rating
                    }
                    ajaxHelper('/api/Restaurants/', 'POST', foodPlace).done(function (item) {
                        self.restaurants.push(item);
                    });
                    */
                }
            }
        }


        function createMarker(place) {

            var marker = new google.maps.Marker({
                map: map,
                position: place.geometry.location
            });

            var request = { reference: place.reference };
            service.getDetails(request, function (details, status) {
                foodPlace = {
                    PlaceID: details.id,
                    Name: details.name,
                    PriceLevel: details.price_level,
                    WebSite: details.website,
                    Rating: details.rating
                };

                ajaxHelper('/api/Restaurants/', 'POST', foodPlace);//.done(function (item) {
                //self.restaurants.push(item);
                //});

                google.maps.event.addListener(marker, 'click', function () {
                    infowindow.setContent(details.name + "<br />" + details.formatted_address + "<br />" + details.website + "<br />" + details.rating + "<br />" + details.formatted_phone_number + "<br />" + details.price_level + "<br />" + details.opening_hours.periods[1].open.time);
                    infowindow.open(map, marker);
                });
            });
        }
    }

           
                @*var geocoder = new google.maps.Geocoder();
                geocoder.geocode({ '@ViewBag.location': address }, function (results, status) {

                    if (status == google.maps.GeocoderStatus.OK) {
                        latitude = results[0].geometry.location.lat;
                        longitude = results[0].geometry.location.lng;

                    } else {
                        alert("Geocode was not successful for the following reason: " + status);
                    }

                });*@
           

    function callback(results, status) {
        if (status === google.maps.places.PlacesServiceStatus.OK) {
            for (var i = 0; i < results.length; i++) {
                createMarker(results[i]);
                //id = i + 1;
                /*
                foodPlace = {
                    PlaceID: results[i].id,
                    Name: results[i].name,
                    PriceLevel: results[i].price_level,
                    WebSite: results[i].website,
                    Rating: results[i].rating
                }
                ajaxHelper('/api/Restaurants/', 'POST', foodPlace).done(function (item) {
                    self.restaurants.push(item);
                });
                */
            }
        }
    }

    //function createMarker(place) {

    //    var marker = new google.maps.Marker({
    //        map: map,
    //        position: place.geometry.location
    //    });

    //    var request = { reference: place.reference };
    //    service.getDetails(request, function (details, status) {
    //        foodPlace = {
    //            PlaceID: details.id,
    //            Name: details.name,
    //            PriceLevel: details.price_level,
    //            WebSite: details.website,
    //            Rating: details.rating
    //        };

    //        ajaxHelper('/api/Restaurants/', 'POST', foodPlace);//.done(function (item) {
    //        //self.restaurants.push(item);
    //        //});

    //        google.maps.event.addListener(marker, 'click', function () {
    //            infowindow.setContent(details.name + "<br />" + details.formatted_address + "<br />" + details.website + "<br />" + details.rating + "<br />" + details.formatted_phone_number + "<br />" + details.price_level + "<br />" + details.opening_hours.periods[1].open.time);
    //            infowindow.open(map, marker);
    //        });
    //    });


       

    

            //$(function () {
            //    //Send an AJAX request
            //    $.getJSON(restaurantsUri)
            //        .done(function (data) {
            //            //On success, 'data' contains a list of products.
            //            $.each(data, function (key, item) {
            //                //Add a list item for the product.
            //                $('<li>', { text: formatItem(item) }).appendTo($('#products'));
            //            });
            //        });
            //});

            //function formatItem(item) {
            //    return item.Name + ': ' + item.PriceLevel;
            //}

    //google.maps.event.addDomListener(window, 'load', initialize);
    $(document).ready(function (location) {
        navigator.geolocation.getCurrentPosition(initialize);
    });

</script>
    }
      
    
    @*@Scripts.Render("~/bundles/app")*@  
}
<script src="https://maps.googleapis.com/maps/api/js?libraries=places" type="text/javascript"></script>
<div>
    <p>@ViewBag.userName</p>
    <p>@ViewBag.userID</p>
    <p>@ViewBag.foodValue</p>
    <p>@ViewBag.location</p>
    
</div>

<div class="page-header">
    <h2>
        DetroitEatz
    </h2>
    @using (Html.BeginForm("Index", "Home"))
    {
        <p>
            Food Choice: @Html.DropDownList("foodChoice")
            Your Location: @Html.TextBox("searchString")
            <input type="submit" value="Find" />
       </p>
    }
</div>


@*<div>
    <ul id="products" />
    </div>
    <div id="panel">
        <input id="address" type="text" value="New Delhi">
        <input type="button" value="Search" onclick="test()">
        </div>*@


@*<small><a href="#" data-bind="click: $parent.test">Details</a></small>
    <p data-bind="text: favoriteDetail"></p>*@


<div id="map" style="width: 1200px; height: 350px; border: 5px solid #5E5454;"></div>



<table class="table">
    <tr>
        <th>
            @Html.DisplayNameFor(model => model.Name)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.PriceLevel)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.WebSite)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.State)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.Rating)
        </th>
        <th></th>
    </tr>

   
        @foreach (var item in Model)
        {
            <tr>
                <td>
                    @Html.DisplayFor(modelItem => item.Name)
                </td>
                <td>
                    @if (item.PriceLevel == "0")
                    {
                        item.PriceLevel = "Free";
                    }
                    else if (item.PriceLevel == "1")
                    {
                        item.PriceLevel = "Inexpensive";
                    }
                    else if (item.PriceLevel == "2")
                    {
                        item.PriceLevel = "Moderate";
                    }
                    else if (item.PriceLevel == "3")
                    {
                        item.PriceLevel = "Expensive";
                    }
                    else if (item.PriceLevel == "4")
                    {
                        item.PriceLevel = "Very Expensive";
                    }
                    else
                    {
                        item.PriceLevel = "N/A";
                    }
                    @Html.DisplayFor(modelItem => item.PriceLevel)
                </td>

                <td>
                    <a href=@item.WebSite>@item.WebSite</a>
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.State)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Rating)
                </td>
                <td>
                    @Html.ActionLink("Home", "Index", new { id = item.PlaceID })

                </td>
            </tr>
        }

    </table>



@*geocoder.geocode({ '@ViewBag.location': address }, function (results, status) {
        if (status == google.maps.GeocoderStatus.OK) {
            map.setCenter(results[0].geometry.location);
            var marker = new google.maps.Marker({
                map: map,
                position: results[0].geometry.location
            });
        } else {
            alert("Geocode was not successful for the following reason: " + status);
        }
    });*@